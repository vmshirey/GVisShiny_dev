V(g)$size <- scale(abs(mem), 15, 25)
E(g)$color <- "grey"
E(g)[V(g)[color="grey"] %--% V(g)[color="green"] ]$color <- "red"
plot(g)
g <- read.graph(file.choose(), format="ncol")
plot(g)
plot(g, vertex.size=10)
g <- read.graph(file.choose(), format="ncol")
plot(g, vertex.size=10)
plot(g, vertex.size=10, vertex.label.dist = 1)
plot(g, vertex.size=10, vertex.label.dist = 4)
plot(g, vertex.size=10, vertex.label.color="black")
plot(g, vertex.size=10, vertex.label.color="black", vertex.label.degree="pi/2")
plot(g, vertex.size=10, vertex.label.color="black", vertex.label.degree=pi/2)
plot(g, vertex.size=10, vertex.label.color="black", vertex.label.degree=pi/2, edge.curved=.1)
plot(g, vertex.size=10, vertex.label.color="black", vertex.label.degree=pi/2, edge.curved=.1, vertex.label.cex=.7)
plot(g, vertex.size=10, vertex.label.color="black", vertex.label.degree=pi/2, edge.curved=0, vertex.label.cex=.7)
plot(g, vertex.size=10, vertex.label.color="black", vertex.label.degree=pi/2, edge.curved=0, vertex.label.cex=.7, vertex.shape="none")
plot(g, vertex.size=10, vertex.label.color="black", vertex.label.degree=pi/2, edge.curved=0, vertex.label.cex=.7, vertex.shape="none")
plot(g, vertex.size=10, vertex.label.color="black", vertex.label.degree=pi/2, edge.curved=0, vertex.label.cex=.7, vertex.shape="none", layout=1)
plot(g, vertex.size=10, vertex.label.color="black", vertex.label.degree=pi/2, edge.curved=0, vertex.label.cex=.7, vertex.shape="none", layout=layout_with_fr)
Entnet <- read.graph(file.choose(), format="ncol")
plot(Entnet)
plot(Entnet, vertex.size=10)
plot(Entnet, vertex.size=7)
plot(Entnet, vertex.size=1)
plot(Entnet, vertex.size=10)
plot(Entnet, vertex.size=10, layout=layout_with_fr)
plot(Entnet, vertex.size=10, layout=layout_with_lgl)
plot(Entnet, vertex.size=10, layout=layout_as_star)
plot(Entnet, vertex.size=10, layout=layout_components)
plot(Entnet, vertex.size=10, layout=layout_nicely)
plot(Entnet, vertex.size=10, layout=layout_on_grid)
plot(Entnet, vertex.size=10, layout=layout_with_dh)
plot(Entnet, vertex.size=10, layout=layout_with_gem)
plot(Entnet, vertex.size=10, layout=layout_with_kk)
plot(Entnet, vertex.size=10, layout=layout_with_mds)
plot(Entnet, vertex.size=10, layout=layout_with_dri)
plot(Entnet, vertex.size=10, layout=layout_with_drl)
plot(Entnet, vertex.size=10, layout=layout_with_graphopt)
plot(Entnet, vertex.size=10, layout=layout_nicely)
plot(Entnet, vertex.size=10, layout=layout_nicely, vertex_label.cex=1)
plot(Entnet, vertex.size=10, layout=layout_nicely, vertex.label.cex=1)
plot(Entnet, vertex.size=10, layout=layout_nicely, vertex.label.cex=.5)
plot(Entnet, vertex.size=10, layout=layout_nicely, vertex.label.cex=.75)
plot(Entnet, vertex.size=7, layout=layout_nicely, vertex.label.cex=.75)
plot(Entnet, vertex.size=7, layout=layout_nicely, vertex.label.cex=.75)
V(Entnet)$color <- c("tomato", "gold")
plot(Entnet, vertex.size=7, layout=layout_nicely, vertex.label.cex=.75)
V(Entnet)$size <- degree(Entnet)
plot(Entnet, vertex.size=7, layout=layout_nicely, vertex.label.cex=.75)
V(Entnet)$size <- degree(Entnet)/10
plot(Entnet, vertex.size=7, layout=layout_nicely, vertex.label.cex=.75)
plot(Entnet, layout=layout_nicely, vertex.label.cex=.75)
V(Entnet)$size <- degree(Entnet)
plot(Entnet, layout=layout_nicely, vertex.label.cex=.75)
V(Entnet)$size <- degree(Entnet)/5
plot(Entnet, layout=layout_nicely, vertex.label.cex=.75)
V(Entnet)$size <- degree(Entnet)/2
plot(Entnet, layout=layout_nicely, vertex.label.cex=.75)
plot(Entnet, layout=layout_nicely, vertex.label.cex=.75, vertex.color=1:5)
plot(Entnet, layout=layout_nicely, vertex.label.cex=.75, vertex.color=c("tomato", "gold"))
V(g)$color <- ifelse(V(Entnet)$name %in% dat[,1], "tomato", "gold")
V(g)$color <- ifelse(V(Entnet)$name %in% Entnet[,1], "tomato", "gold")
dat <- read.csv(file.choose(), header=FALSE)
V(g)$color <- ifelse(V(Entnet)$name %in% dat[,1], "tomato", "gold")
V(g)$color <- ifelse(V(Entnet) %in% dat[,1], "tomato", "gold")
plot(Entnet, layout=layout_nicely, vertex.label.cex=.75, vertex.color=c("tomato", "gold"))
install.packages('parcoord')
library(parcoord)
parcoord(dat)
install.packages(MASS)
install.packages('MASS')
install.packages("colorRamps")
library(MASS)
library(colorRamps)
data("mtcars")
k <- blue2red(100)
x <- cut(mtcars$mpg, 100)
op <- par(mar=c(3, rep(.1, 3)))
parcoord(mtcars, col=k[as.numeric(x)])
par(op)
install.packages("alluvial")
library(alluvial)
library(devtools)
install_github("mbojan/alluvial")
install.packages('devtools')
library(devtools)
install_github("mbojan/alluvial")
library(alluvial)
dat <- as.data.frame(data)
dat <- as.data.frame(dat)
alluvial(dat)
tit <- as.data.frame(Titanic)
tit2d <- aggregate(Freq ~ Class + Survived, data=tit, sum)
alluvial(tit2d[,1:2], freq=tit2d$Freq, xw=0.0, alpha=0.8, gap.width=0.1, col="steelblue", border="white, layer=tit2d$Survived != "Yes"")
alluvial(tit2d[,1:2], freq=tit2d$Freq, xw=0.0, alpha=0.8, gap.width=0.1, col="steelblue", border="white, layer=tit2d$Survived != "Yes")
alluvial(tit2d[,1:2], freq=tit2d$Freq, xw=0.0, alpha=0.8, gap.width=0.1, col="steelblue", border="white", layer=tit2d$Survived != "Yes")
clear
dat <- read.csv(file.choose(), header=TRUE)
dat2 <- as.data.frame(dat)
dat2d <- aggregate(Freq ~ Country + Family, data=dat2, sum)
head(Titanic)
Titanic
dat2
head(dat)
head(dat2)
table(dat[,c("Country", "Family")])
dattable <- table(dat[,c("Country", "Family")])
dat2d <- aggregate(Freq ~ Country + Family, data=dattable, sum)
alluvial(dattable[,1:2], freq=dattable$Freq, xw=0.0, alpha.0.8)
alluvial(dattable[,1:2], freq=dattable$Freq, xw=0.0, alpha=0.8)
alluvial(dattable[,1:2], freq=dattable, xw=0.0, alpha=0.8)
alluvial(dat2d[,1:2], freq=dat2d$Freq, xw=0.0, alpha=0.8)
alluvial(dat2d[,1:2], freq=dat2d$Freq, xw=0.0, alpha=0.8, gap.width = 0.1, col="steelblue", border="white")
alluvial(dat2d[,1:2], freq=dat2d$Freq, xw=0.0, alpha=0.8, gap.width = 0.8, col="steelblue", border="white")
alluvial(dat2d[,1:2], freq=dat2d$Freq, xw=0.0, alpha=0.8, gap.width = 1, col="steelblue", border="white")
alluvial(dat2d[,1:2], freq=dat2d$Freq, xw=0.5, alpha=0.8, gap.width = 1, col="steelblue", border="white")
alluvial(dat2d[,1:2], freq=dat2d$Freq, xw=0.5, alpha=0.8, gap.width = 0, col="steelblue", border="white")
alluvial(dat2d[,1:2], freq=dat2d$Freq, xw=0.0, alpha=0.8, gap.width = 0, col="steelblue", border="white")
alluvial(dat2d[,1:2], freq=dat2d$Freq, xw=0.0, alpha=0.8, gap.width = 0, col="gold", border="black")
alluvial(dat2d[,1:2], freq=dat2d$Freq, xw=0.0, alpha=0.8, gap.width = 2, col="gold", border="black")
alluvial(dat2d[,1:2], freq=dat2d$Freq, xw=0.0, alpha=0.8, gap.width = 10, col="gold", border="black")
alluvial(dat2d[,1:2], freq=dat2d$Freq, xw=0.0, alpha=0.8, gap.width = 10, col="tomato", border="black")
parcoord(dat2d[,1:2])
alluvial(dat2d[,1:2], freq=dat2d$Freq, xw=0.0, alpha=0.8, gap.width = 10, col="tomato", border="black")
alluvial(dat2d[,1:2], freq=dat2d$Freq, xw=0.0, alpha=0.8, gap.width = 5, col="tomato", border="black")
alluvial(dat2d[,1:2], freq=dat2d$Freq, xw=0.0, alpha=0.8, gap.width = .9, col="tomato", border="black")
alluvial(dat2d[,1:2], freq=dat2d$Freq, xw=0.5, alpha=0.8, gap.width = .9, col="tomato", border="black")
alluvial(dat2d[,1:2], freq=dat2d$Freq, xw=0.1, alpha=0.8, gap.width = .9, col="tomato", border="tomato")
alluvial(dat2d[,1:2], freq=dat2d$Freq, xw=0.1, alpha=0.8, gap.width = .9, col="tomato", border=NA)
alluvial(dat2d[,1:2], freq=dat2d$Freq, xw=0.1, alpha=0.8, gap.width = .9, col="tomato", border="tomato")
alluvial(dat2d[,1:2], freq=dat2d$Freq, xw=0.1, alpha=0.8, gap.width = .9, col="tomato", border="tomato", hide = "Mexico")
alluvial(dat2d[,1:2], freq=dat2d$Freq, xw=0.1, alpha=0.8, gap.width = .9, col="tomato", border="tomato")
alluvial(dat2d[,1:2], freq=dat2d$Freq, xw=0.1, alpha=0.8, gap.width = .9, col="tomato", border="tomato", hide = dat2d$Freq < quantile(dat2d$Freq, .50))
alluvial(dat2d[,1:2], freq=dat2d$Freq, xw=0.1, alpha=0.8, gap.width = .9, col="tomato", border="tomato", hide = dat2d$Freq < quantile(dat2d$Freq, .75))
alluvial(dat2d[,1:2], freq=dat2d$Freq, xw=0.1, alpha=0.8, gap.width = .9, col="tomato", border="tomato", hide = dat2d$Freq < quantile(dat2d$Freq, .80))
alluvial(dat2d[,1:2], freq=dat2d$Freq, xw=0.1, alpha=0.8, gap.width = .9, col="tomato", border="tomato", hide = dat2d$Freq < 150)
alluvial(dat2d[,1:2], freq=dat2d$Freq, xw=0.1, alpha=0.8, gap.width = .9, col="tomato", border="tomato", hide = dat2d$Freq < 2)
alluvial(dat2d[,1:2], freq=dat2d$Freq, xw=0.1, alpha=0.8, gap.width = .9, col="tomato", border="tomato", hide = dat2d$Freq < 5)
alluvial(dat2d[,1:2], freq=dat2d$Freq, xw=0.1, alpha=0.8, gap.width = .9, col="tomato", border="tomato", hide = dat2d$Freq < 2)
dattable
alluvial(dat2d[,1:2], freq=dat2d$Freq, xw=0.1, alpha=0.8, gap.width = .9, col="tomato", border="tomato", hide = dat2d$County != NA)
alluvial(dat2d[,1:2], freq=dat2d$Freq, xw=0.1, alpha=0.8, gap.width = .9, col="tomato", border="tomato", hide = dat2d$County != "")
alluvial(dat2d[,1:2], freq=dat2d$Freq, xw=0.1, alpha=0.8, gap.width = .9, col="tomato", border="tomato", hide = dat2d$County != "United States")
alluvial(dat2d[,1:2], freq=dat2d$Freq, xw=0.1, alpha=0.8, gap.width = .9, col="tomato", border="tomato", hide = dat2d$County = "United States")
alluvial(dat2d[,1:2], freq=dat2d$Freq, xw=0.1, alpha=0.8, gap.width = .9, col="tomato", border="tomato", hide = dat2d$County = 'United States')
alluvial(dat2d[,1:2], freq=dat2d$Freq, xw=0.1, alpha=0.8, gap.width = .9, col="tomato", border="tomato", hide = dat2d$County)
alluvial(dat2d[,1:2], freq=dat2d$Freq, xw=0.1, alpha=0.8, gap.width = .9, col="tomato", border="tomato", hide = dat2d$County != "United States")
alluvial(dat2d[,1:2], freq=dat2d$Freq, xw=0.1, alpha=0.8, gap.width = .9, col="tomato", border="tomato")
dat2d$Country
alluvial(dat2d[,1:2], freq=dat2d$Freq, xw=0.1, alpha=0.8, gap.width = .9, col="tomato", border="tomato", hide = dat2d$County > 0)
alluvial(dat2d[,1:2], freq=dat2d$Freq, xw=0.1, alpha=0.8, gap.width = .9, col="tomato", border="tomato", hide = dat2d$County < 10)
alluvial_ts(dat2d)
alluvial_ts(dat)
alluvial_ts(dat2)
alluvial_ts(dattable)
alluvial(dat2d[,1:2], freq=dat2d$Freq, xw=0.1, alpha=0.8, gap.width = .9, col="tomato", border="tomato", hide = dat2d$County < 10)
alluvial(dat2d[,1:2], freq=dat2d$Freq, xw=0.1, alpha=0.8, gap.width = .9, col="tomato", border="tomato", hide = toString(dat2d$County) != "")
tax <- read.csv(file.choose(), header=TRUE)
tax2 <- as.data.frame(tax)
taxtable <- table(tax[,c("Class", "Order", "Family", "Genus")])
alluvial(taxtable[,1:4], freq=taxtable$Freq, border=NA)
alluvial(taxtable[,1:5], freq=taxtable$Freq, border=NA)
alluvial(taxtable[,1:2], freq=taxtable$Freq, border=NA)
taxtable
alluvial(tax)
alluvial(tax, freq=taxtable$Freq)
alluvial(taxtable[,1:4], freq=taxtable$Freq, border=NA, col="tomato")
dim(taxtable)
alluvial(taxtable[,1:197], freq=taxtable$Freq, border=NA, col="tomato")
head(taxtable)
taxtable
alluvial(taxtable[,1], freq=taxtable$Freq, border=NA, col="tomato")
alluvial(taxtable[,1:3], freq=taxtable$Freq, border=NA, col="tomato")
nrow(taxtable)
ncol(taxtable)
alluvial(taxtable[1:3], freq=taxtable$Freq, border=NA, col="tomato")
alluvial(taxtable[1:4], freq=taxtable$Freq, border=NA, col="tomato")
tax2d <- aggregate(Freq ~ Class + Order + Family + Genus, data=taxtable, sum)
alluvial(tax2d[,1:2], freq=tit2d$Freq)
alluvial(tax2d[,1:2], freq=tax2d$Freq)
alluvial(tax2d[,1:5], freq=tax2d$Freq)
alluvial(tax2d[,1:4], freq=tax2d$Freq, hide = tax2d$Freq < 2)
require(MASS)
require(colorRamps)
require(alluvial)
dat <- read.csv(file.choose())
head(dat)
dat <- as.data.frame(dat)
dat2 <- table(dat)
head dat2
head(dat2)
dat2d <- aggregate(Freq ~ Country + Family, data=dat2, sum)
alluvial(dat2d[,1:2], freq=dat2d$Freq, xq=0.0, alpha=0.7, col="steelblue", hide = dat2d$Freq < 5)
alluvial(dat2d[,1:2], freq=dat2d$Freq, xw=0.0, alpha=0.7, col="steelblue", hide = dat2d$Freq < 5)
alluvial(dat2d[,1:2], freq=dat2d$Freq, xw=0.0, alpha=0.7, gap.width = 0.1, col="steelblue", hide = dat2d$Freq < 5)
alluvial(dat2d[,1:2], freq=dat2d$Freq, xw=0.0, alpha=0.7, gap.width = 1, col="steelblue", hide = dat2d$Freq < 5)
alluvial(dat2d[,1:2], freq=dat2d$Freq, xw=0.0, alpha=0.7, gap.width = 0.5, col="steelblue", hide = dat2d$Freq < 5)
alluvial(dat2d[,1:2], freq=dat2d$Freq, xw=0.0, alpha=0.7, gap.width = 0.5, col="steelblue", hide = dat2d$Freq < 5, border=NA)
alluvial(dat2d[,1:2], freq=dat2d$Freq, xw=0.25, alpha=0.7, gap.width = 0.5, col="steelblue", hide = dat2d$Freq < 5, border=NA)
alluvial(dat2d[,1:2], freq=dat2d$Freq, xw=0.25, alpha=0.7, gap.width = 0.5, col="steelblue", hide = dat2d$Freq < 5, border="blue")
alluvial(dat2d[,1:2], freq=dat2d$Freq, xw=0.25, alpha=0.7, gap.width = 0.5, col="steelblue", hide = dat2d$Freq < 5, border="lightblue")
alluvial(dat2d[,1:2], freq=dat2d$Freq, xw=0.25, alpha=0.7, gap.width = 0.5, col="steelblue", hide = dat2d$Freq < 2, border="lightblue")
alluvial(dat2d[,1:2], freq=dat2d$Freq, xw=0.25, alpha=0.7, gap.width = 0.5, col="steelblue", hide = dat2d$Freq < 2, border="steelblue")
alluvial(dat2d[,1:2], freq=dat2d$Freq, xw=0.25, alpha=0.7, gap.width = 0.5, col="steelblue", hide = dat2d$Freq < 2, border="steelblue4")
require(alluvial)
tax <- read.csv(file.choose())
tax <- as.data.frame(tax)
tax2 < table(tax)
tax2 <- table(tax)
tax2d <- aggregate(Freq ~ Class + Order + Family + Genus, data=tax2, sum)
alluvial(tax2d[,1:4], freq=tax2d$Freq, xw=0.0, alpha=0.8, col="gold", border="white" hide = tax2d$Freq < 5)
alluvial(tax2d[,1:4], freq=tax2d$Freq, xw=0.0, alpha=0.8, col="gold", border="white", hide = tax2d$Freq < 5)
alluvial(tax2d[,1:4], freq=tax2d$Freq, xw=0.25, alpha=0.8, col="gold", border="white", hide = tax2d$Freq < 5)
alluvial(tax2d[,1:4], freq=tax2d$Freq, xw=0.25, alpha=0.8, col="gold", border="yellow", hide = tax2d$Freq < 5)
alluvial(tax2d[,1:4], freq=tax2d$Freq, xw=0.25, alpha=0.8, col="gold", border="steelblue", hide = tax2d$Freq < 5)
alluvial(tax2d[,1:4], freq=tax2d$Freq, xw=0.25, alpha=0.8, col="gold", border=NA, hide = tax2d$Freq < 5)
alluvial(tax2d[,1:4], freq=tax2d$Freq, xw=0.25, alpha=0.5, col="gold", border=NA, hide = tax2d$Freq < 5)
alluvial(tax2d[,1:4], freq=tax2d$Freq, xw=0.25, alpha=0.5, col="gold", border="white", hide = tax2d$Freq < 5)
alluvial(tax2d[,1:4], freq=tax2d$Freq, xw=0.25, alpha=0.5, col="gold", border="white", hide = tax2d$Freq < 10)
alluvial(tax2d[,1:4], freq=tax2d$Freq, xw=0.25, alpha=0.5, col="gold", border="white", hide = tax2d$Freq < 100)
alluvial(tax2d[,1:4], freq=tax2d$Freq, xw=0.25, alpha=0.5, col="gold", border="white", hide = tax2d$Freq < 10)
alluvial(tax2d[,1:4], freq=tax2d$Freq, xw=0.25, alpha=0.5, col="gold", border="white", hide = tax2d$Freq < 10, gap.width=0.1)
alluvial(tax2d[,1:4], freq=tax2d$Freq, xw=0.25, alpha=0.5, col="gold", border="white", hide = tax2d$Freq < 10, gap.width=0.5)
alluvial(tax2d[,1:4], freq=tax2d$Freq, xw=0.25, alpha=0.5, col="gold", border=NA, hide = tax2d$Freq < 10, gap.width=0.5)
alluvial(tax2d[,1:4], freq=tax2d$Freq, xw=0.25, alpha=0.5, col="gold", border=NA, hide = tax2d$Freq < 10, gap.width=0.9)
alluvial(tax2d[,1:4], freq=tax2d$Freq, xw=0.25, alpha=0.5, col="gold", border=NA, hide = tax2d$Freq < 10, gap.width=2)
alluvial(tax2d[,1:4], freq=tax2d$Freq, xw=0.25, alpha=0.5, col="gold", border=NA, hide = tax2d$Freq < 10, gap.width=15)
alluvial(tax2d[,1:4], freq=tax2d$Freq, xw=0.25, alpha=0.5, col="gold", border=NA, hide = tax2d$Freq < 10, gap.width=1)
alluvial(tax2d[,1:4], freq=tax2d$Freq, xw=0.25, alpha=0.5, col="gold", border=NA, hide = tax2d$Freq < 10, gap.width=.05)
alluvial(tax2d[,1:4], freq=tax2d$Freq, xw=0.25, alpha=0.5, col="gold", border=NA, hide = tax2d$Freq < quantile(tax2d$Freq, .50), gap.width=.05)
alluvial(tax2d[,1:4], freq=tax2d$Freq, xw=0.25, alpha=0.5, col="gold", border=NA, hide = tax2d$Freq < 50, gap.width=.05)
alluvial(tax2d[,1:4], freq=tax2d$Freq, xw=0.25, alpha=0.5, col="gold", border=NA, hide = tax2d$Freq < 10, gap.width=.05)
require(igraph)
read.graph(file.choose, format="ncol")
read.graph(file.choose(), format="ncol")
require(alluvial)
dat <- as.data.frame(read.csv(file.choose(), header=TRUE))
dat <- table(dat)
dat2d <- aggregate(Freq ~ recordedBy + order, data=dat, sum)
alluvial(dat2d[,1:2], freq=dat2d$Freq)
alluvial(dat2d[,1:2], freq=dat2d$Freq, alpha=0.8, col="tomato")
alluvial(dat2d[,1:2], freq=dat2d$Freq, alpha=0.8, col="tomato", hide = dat2d$Freq < 2)
alluvial(dat2d[,1:2], freq=dat2d$Freq, alpha=0.8, col="tomato", hide = dat2d$Freq < 5)
alluvial(dat2d[,1:2], freq=dat2d$Freq, alpha=0.8, col="tomato", hide = dat2d$Freq < 5, blocks = blocks)
alluvial(dat2d[,1:2], freq=dat2d$Freq, alpha=0.8, col="tomato", hide = dat2d$Freq < 5, blocks = blocks)
alluvial(dat2d[,1:2], freq=dat2d$Freq, alpha=0.8, col="tomato", hide = dat2d$Freq < 5, title = "Collector to Taxon")
alluvial(dat2d[,1:2], freq=dat2d$Freq, alpha=0.8, col="tomato", hide = dat2d$Freq < 5)
alluvial(dat2d[,1:2], freq=dat2d$Freq, alpha=0.8, col="tomato", hide = dat2d$Freq < 5, xw = .25, cw= .25)
alluvial(dat2d[,1:2], freq=dat2d$Freq, alpha=0.8, col="tomato", hide = dat2d$Freq < 5, xw = .25, cw= 1)
alluvial(dat2d[,1:2], freq=dat2d$Freq, alpha=0.8, col="tomato", hide = dat2d$Freq < 5, xw = .25)
alluvial(dat2d[,1:2], freq=dat2d$Freq, alpha=0.8, col="tomato", hide = dat2d$Freq < 5, xw = .25)
dat <- as.data.frame(read.csv(file.choose(), header=TRUE))
dat <- table(dat)
dat2d <- aggregate(Freq ~ recordedBy + order, data=dat, sum)
alluvial(dat2d[,1:2], freq=dat2d$Freq, alpha=0.8, col="tomato", hide = dat2d$Freq < 5, xw = .25)
dat <- as.data.frame(read.csv(file.choose(), header=TRUE))
dat <- table(dat)
dat2d <- aggregate(Freq ~ recordedBy + order, data=dat, sum)
alluvial(dat2d[,1:2], freq=dat2d$Freq, alpha=0.8, col="tomato", hide = dat2d$Freq < 5, xw = .25)
require(igraph  )
gwc <- read.graph(file.choose(), format="ncol")
plot(gwc)
gwc <- read.graph(file.choose(), format="ncol")
gwc <- read.graph(file.choose(), format="ncol")
plot(gwc)
V(gwc)$set <- V(gwc)$weight
head(gwc)
gwc
plot(gwc, vertex.color = "tomato")
plot(gwc, vertex.color = "tomato", vertex.shape = "raster")
plot(gwc, vertex.color = "tomato", vertex.shape = "sphere")
V(gwc)$size <- gwc$weight
V(gwc)$size <- gwc$3
gwc <- cbind(rownames(gwc), gwc)
rownames(gwc) <- NULL
colnames(gwc) <- c("Order", "collector", "weight")
gwc
gwc <- read.graph(file.choose(), format="ncol")
V(gwc)$size <- gwc$WEIGHT
plot(gwc, vertex.color = "tomato", vertex.shape = "sphere")
gwc <- read.graph(file.choose(), format="ncol")
ts <- degree(gwc, mode="all")
plot(gwc, vertex.color = "tomato", vertex.shape = "sphere", vertex.size=ts)
plot(gwc, vertex.color = "tomato", vertex.shape = "sphere", vertex.size=ts*3)
plot(gwc, vertex.color = "tomato", vertex.shape = "sphere", vertex.size=ts*10)
ts <- degree(gwc, mode="in")
plot(gwc, vertex.color = "tomato", vertex.shape = "sphere", vertex.size=ts*10)
require(alluvial)
dat <- as.data.frame(read.csv(file.choose(), header=TRUE))
dat <- table(dat)
dat <- as.data.frame(dat)
dat2d <- aggregate(Freq~Order + Family, data=dat, sum)
dat2d <- aggregate(Freq~order + family, data=dat, sum)
alluvial(dat2d[,1:2], freq=dat2d$Freq, alpha=0.8, col="gold")
alluvial(dat2d[,1:2], freq=dat2d$Freq, alpha=0.8, col="gold", gap.width=0.1)
alluvial(dat2d[,1:2], freq=dat2d$Freq, alpha=0.8, col="gold", gap.width=0.1, hide = dat2d$Freq < 5)
require(MASS)
require(colorRamps)
k <- blue2red(100)
parcoord(dat2d, col=k[as.numeric(x)])
parcoord(dat2d, col=k
)
parcoord(dat2d
)
parcoord(dat)
data(mtcars)
x <- cut(mtcars$mpg, 100)
op <- par(mar=c(3, rep(.1,3)))
parcoord(mtcars, col=k[as.numeric(x)])
par(op)
datdif <- as.data.frame(lapply(as.data.frame(dat), as.numeric))
datdif2 <- datdif[rep(1:nrow(datdif), datdif$Freq),]
datdif2[,6:9] <- lapply(datdif2[,1:4], jitter)
datdif2[,3:7] <- lapply(datdif2[,1:2], jitter)
k <- adjustcolor(brewer.pal(3, "Set1")[datdif2$order, alpha=0.2])
op <- par(mar=c(3,1,1,1))
parcoord(datdif2[,3:7])
parcoord(datdif2[,3:7], col=k)
parcoord(datdif2[,3:7], col=k, alpha=.5)
require(googleVis)
install.packages("googleVis")
require(googleVis)
plot(gvisSankey(dat2d, from="order", to="family"))
dat <- as.data.frame(read.csv(file.choose(), header=TRUE))
plot(gvisSankey(dat, from="order", to="family", weight="weight"))
plot(gvisSankey(dat, from="order", to="family", weight="weight", options=list(sankey="{link:{color:{fill:'lightblue"}}, node:{width: 4}}"")))
plot(gvisSankey(dat, from="order", to="family", weight="weight", options=list(sankey="{link:{color:{fill:'lightblue"}}, node:{width: 4}}")))
plot(gvisSankey(dat, from="order", to="family", weight="weight", options=list(sankey="{link:{color:{fill:'lightblue'}}}")))
plot(gvisSankey(dat, from="order", to="family", weight="weight",
options=list(sankey="{link: {color: {fill:'lightblue'} } ,
node: {width: 4, color: {fill: '#a61d5c'} }
}")))
plot(gvisSankey(dat, from="order", to="family", weight="weight",
options=list(sankey="{link: {color: {fill:'lightblue'} } ,
node: {width: 4, color: {fill: '#a61d5c'} }
}",
height=250)))
plot(gvisSankey(dat, from="order", to="family", weight="weight",
options=list(sankey="{link: {color: {fill:'lightblue'} } ,
node: {width: 4, color: {fill: '#a61d5c'} }
}",
height=750)))
dat <- as.data.frame(read.csv(file.choose(), header=TRUE))
plot(gvisSankey(dat, from="collector", to="order", weight="weight",
options=list(sankey="{link: {color: {fill:'lightblue'} } ,
node: {width: 4, color: {fill: '#a61d5c'} }
}",
height=750)))
plot(gvisSankey(dat, from="collector", to="order", weight="weight",
options=list(sankey="{link: {color: {fill:'lightblue'} } ,
node: {width: 4, color: {fill: '#a61d5c'} }
}",
height=500)))
plot(gvisSankey(dat, from="collector", to="order", weight="weight",
options=list(sankey="{link: {color: {fill:'lightblue'} } ,
node: {width: 4, color: {fill: '#a61d5c'} }
}",
height=500, witdh = 500)))
plot(gvisSankey(dat, from="collector", to="order", weight="weight",
options=list(sankey="{link: {color: {fill:'lightblue'} } ,
node: {width: 4, color: {fill: '#a61d5c'} }
}",
height=500, witdh = 750)))
plot(gvisSankey(dat, from="collector", to="order", weight="weight",
options=list(sankey="{link: {color: {fill:'lightblue'} } ,
node: {width: 4, color: {fill: '#a61d5c'} }
}",
height=750, witdh = 750)))
plot(gvisSankey(dat, from="collector", to="order", weight="weight",
options=list(sankey="{link: {color: {fill:'lightblue'} } ,
node: {width: 4, color: {fill: '#a61d5c'} }
}",
height=800, witdh = 750)))
plot(gvisSankey(dat, from="collector", to="order", weight="weight",
options=list(sankey="{link: {color: {fill:'lightblue'} } ,
node: {width: 4, color: {fill: '#a61d5c'} }
}",
height=500, witdh = 750)))
plot(gvisSankey(dat, from="source", to="destination", weight="weight"))
require(igraph)
require(googleVis)
dat <- as.data.frame(read.csv(file.choose(), header=TRUE))
plot(gvisSankey(dat, from="source", to="destination", weight="weight"))
require(igraph)
require(googleVis)
dat <- as.data.frame(read.csv(file.choose(), header=TRUE))
plot(gvisSankey(dat, from="source", to="destination", weight="weight"))
require(igraph)
require(googleVis)
dat <- as.data.frame(read.csv(file.choose(), header=TRUE))
plot(gvisSankey(dat, from="source", to="destination", weight="weight"))
require(igraph)
require(googleVis)
dat <- as.data.frame(read.csv(file.choose(), header=TRUE))
plot(gvisSankey(dat, from="source", to="destination", weight="weight"))
require(igraph)
require(googleVis)
dat <- as.data.frame(read.csv(file.choose(), header=TRUE))
plot(gvisSankey(dat, from="source", to="destination", weight="weight"))
install.packages("shiny")
library(shiny)
runExample("01_hello")
runApp("App-1")
runApp("App-1", display-mode="showcase")
runApp("App-1", display-mode = "showcase")
runApp('C:/Users/vms44/Desktop/shiny_dev/App-1')
runApp('C:/Users/vms44/Desktop/shiny_dev/App-1')
runApp('C:/Users/vms44/Desktop/shiny_dev/App-1')
runApp('C:/Users/vms44/Desktop/shiny_dev/App-1')
runApp('C:/Users/vms44/Desktop/shiny_dev/App-1')
runApp('C:/Users/vms44/Desktop/shiny_dev/App-1')
runApp('C:/Users/vms44/Desktop/shiny_dev/App-1')
runApp('C:/Users/vms44/Desktop/shiny_dev/App-1')
runApp('C:/Users/vms44/Desktop/shiny_dev/App-1')
runApp('C:/Users/vms44/Desktop/shiny_dev/App-1')
runApp('C:/Users/vms44/Desktop/shiny_dev/App-1')
runApp('C:/Users/vms44/Desktop/shiny_dev/App-1')
runApp('C:/Users/vms44/Desktop/shiny_dev/App-1')
runApp('C:/Users/vms44/Desktop/shiny_dev/App-1')
runApp('C:/Users/vms44/Desktop/shiny_dev/App-1')
runApp('C:/Users/vms44/Desktop/shiny_dev/App-1')
runApp('C:/Users/vms44/Desktop/shiny_dev/App-1')
shiny::runApp('GitHub/GVisShiny_dev/App-1')
runApp('GitHub/GVisShiny_dev/App-1')
runApp('GitHub/GVisShiny_dev/App-1')
runApp('GitHub/GVisShiny_dev/App-1')
runApp('GitHub/GVisShiny_dev/App-1')
runApp('GitHub/GVisShiny_dev/App-1')
runApp('GitHub/GVisShiny_dev/App-1')
runApp('GitHub/GVisShiny_dev/App-1')
runApp('GitHub/GVisShiny_dev/App-1')
runApp('GitHub/GVisShiny_dev/App-1')
runApp('GitHub/GVisShiny_dev/App-1')
c <- 1:100
c <- 1864:1926
shiny::runApp('GitHub/GVisShiny_dev/App-1')
runApp('GitHub/GVisShiny_dev/App-1')
runApp('GitHub/GVisShiny_dev/App-1')
runApp('GitHub/GVisShiny_dev/App-1')
runApp('GitHub/GVisShiny_dev/App-1')
runApp('GitHub/GVisShiny_dev/App-1')
runApp('GitHub/GVisShiny_dev/App-1')
runApp('GitHub/GVisShiny_dev/App-1')
runApp('GitHub/GVisShiny_dev/App-1')
runApp('GitHub/GVisShiny_dev/App-1')
runApp('GitHub/GVisShiny_dev/App-1')
runApp('GitHub/GVisShiny_dev/App-1')
runApp('GitHub/GVisShiny_dev/App-1')
runApp('GitHub/GVisShiny_dev/App-1')
runApp('GitHub/GVisShiny_dev/App-1')
runApp('GitHub/GVisShiny_dev/App-1')
runApp('GitHub/GVisShiny_dev/App-1')
runApp('GitHub/GVisShiny_dev/App-1')
runApp('GitHub/GVisShiny_dev/App-1')
runApp('GitHub/GVisShiny_dev/App-1')
runApp('GitHub/GVisShiny_dev/App-1')
runApp('GitHub/GVisShiny_dev/App-1')
runApp('GitHub/GVisShiny_dev/App-1')
runApp('GitHub/GVisShiny_dev/App-1')
runApp('GitHub/GVisShiny_dev/App-1')
runApp('GitHub/GVisShiny_dev/App-1')
runApp('GitHub/GVisShiny_dev/App-1')
runApp('GitHub/GVisShiny_dev/App-1')
runApp('GitHub/GVisShiny_dev/App-1')
runApp('GitHub/GVisShiny_dev/App-1')
dat <- read.table(file.choose(), header=TRUE)
dat <- read.table(file.choose(), header=TRUE)
dat <- read.table(file.choose(), header=TRUE, sep='/t')
dat <- read.table(file.choose(), header=TRUE, sep='\t')
plot(dat$datetime, dat$X01_00060_cd)
plot(dat$datetime, dat$X04_00065)
plot(dat$datetime, dat$X14_00010)
shiny::runApp('GitHub/GVisShiny_dev/App-1')
runApp('GitHub/GVisShiny_dev/App-1')
shiny::runApp('GitHub/GVisShiny_dev/App-1')
runApp('GitHub/GVisShiny_dev/App-1')
shiny::runApp('GitHub/GVisShiny_dev/App-1')
runApp('GitHub/GVisShiny_dev/App-1')
runApp('GitHub/GVisShiny_dev/App-1')
install.packages('gtools')
runApp('GitHub/GVisShiny_dev/App-1')
dat <- as.data.frame(read.table('types_yearToOrderToAuthor.csv', header=TRUE, sep=',', strip.white = TRUE, stringsAsFactors = FALSE))
dat[is.na(dat)] <- 0;
## read authority files for authors and periods of active publication plus weights
authority <- as.data.frame.matrix(read.table('authYearAuthority.csv', header=TRUE, sep=',', strip.white = TRUE, stringsAsFactors = FALSE))
authweight <- as.data.frame.matrix(read.table('authYearWeights.csv', header=TRUE, sep=',', strip.white = TRUE, stringsAsFactors = FALSE))
## append year values based on authority for further filtering
dat$destination.initialYear <- authority[match(dat$destination, authority$author), 2]
dat$destination.finalYear <- authority[match(dat$destination, authority$author), 3]
dat$destination.targetYear <- authweight[match(dat$destination, authority$author), 2]
dat$destination.trueWeight <- authweight[match(dat$destination, authority$author), 3]
setwd("~/GitHub/GVisShiny_dev/App-1")
dat <- as.data.frame(read.table('types_yearToOrderToAuthor.csv', header=TRUE, sep=',', strip.white = TRUE, stringsAsFactors = FALSE))
dat[is.na(dat)] <- 0;
## read authority files for authors and periods of active publication plus weights
authority <- as.data.frame.matrix(read.table('authYearAuthority.csv', header=TRUE, sep=',', strip.white = TRUE, stringsAsFactors = FALSE))
authweight <- as.data.frame.matrix(read.table('authYearWeights.csv', header=TRUE, sep=',', strip.white = TRUE, stringsAsFactors = FALSE))
## append year values based on authority for further filtering
dat$destination.initialYear <- authority[match(dat$destination, authority$author), 2]
dat$destination.finalYear <- authority[match(dat$destination, authority$author), 3]
dat$destination.targetYear <- authweight[match(dat$destination, authority$author), 2]
dat$destination.trueWeight <- authweight[match(dat$destination, authority$author), 3]
View(dat)
runApp()
merge(x = dat, y = authorityweight, by = "author", all.y = TRUE)
merge(x = dat, y = authweight, by = "author", all.y = TRUE)
View(authweight)
View(dat)
merge(x = dat, y = authweight, by.y = "author", by.x = "destination", all.y = TRUE)
merge(x = dat, y = authweight, by.y = c("author"), by.x = c("destination"), all.y = TRUE)
